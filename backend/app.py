from flask import Flask, jsonify, request
from flask_cors import CORS

import numpy as np
import pandas as pd
from repository import ESGData, FinancialDataAPI
from util.RecommenderSystem import Recommender
from typing import List
import json
from openAI_service import AIService
y = {'2023-03-21': 104.991367, '2023-03-22': 104.561216, '2023-03-23': 103.481635, '2023-03-24': 102.194584, '2023-03-27': 103.796707, '2023-03-28': 102.782003, '2023-03-29': 104.502796, '2023-03-30': 106.850473, '2023-03-31': 108.183504, '2023-04-03': 105.892971, '2023-04-04': 106.374424, '2023-04-05': 106.123064, '2023-04-11': 108.258348, '2023-04-12': 108.250062, '2023-04-13': 108.479091, '2023-04-14': 109.917663, '2023-04-17': 110.541354, '2023-04-18': 110.845238, '2023-04-19': 110.95749, '2023-04-20': 110.67607, '2023-04-21': 111.4875, '2023-04-24': 111.772243, '2023-04-25': 111.635436, '2023-04-26': 109.98149, '2023-04-27': 110.610405, '2023-04-28': 111.878755, '2023-05-02': 112.002539, '2023-05-03': 111.92108, '2023-05-04': 110.481998, '2023-05-08': 110.315404, '2023-05-09': 109.951948, '2023-05-10': 109.206921, '2023-05-11': 111.117402, '2023-05-12': 112.141981, '2023-05-15': 111.99241, '2023-05-16': 111.469274, '2023-05-23': 112.453109, '2023-05-24': 109.685118, '2023-05-25': 109.950988, '2023-05-26': 111.28156, '2023-05-30': 111.356461, '2023-05-31': 109.908462, '2023-06-01': 110.568582, '2023-06-02': 110.952767, '2023-06-05': 110.800765, '2023-06-07': 111.447989, '2023-06-08': 110.387354, '2023-06-09': 108.87941, '2023-06-12': 110.09005, '2023-06-13': 109.464233, '2023-06-14': 108.861971, '2023-06-15': 109.12193, '2023-06-16': 110.070067, '2023-06-19': 109.28141, '2023-06-20': 109.75001, '2023-06-21': 109.037837, '2023-06-22': 107.511457, '2023-06-26': 106.730267, '2023-06-27': 106.727928, '2023-06-28': 107.700149, '2023-06-29': 107.52881, '2023-06-30': 108.638062, '2023-07-03': 107.579031, '2023-07-05': 106.532683, '2023-07-06': 105.453084, '2023-07-07': 105.264956, '2023-07-11': 103.709771, '2023-07-12': 103.909788, '2023-07-13': 103.722788, '2023-07-14': 103.845155, '2023-07-17': 103.436311, '2023-07-18': 104.403785, '2023-07-19': 103.394573, '2023-07-20': 103.139935, '2023-07-21': 103.57042, '2023-07-24': 103.764208, '2023-07-25': 104.249122, '2023-07-26': 103.257462, '2023-07-27': 103.422902, '2023-07-31': 103.781171, '2023-08-01': 103.582689, '2023-08-02': 102.733913, '2023-08-03': 101.507237, '2023-08-04': 101.537474, '2023-08-07': 101.930785, '2023-08-08': 104.028789, '2023-08-09': 103.842093, '2023-08-10': 103.96326, '2023-08-11': 103.778218, '2023-08-14': 103.969223, '2023-08-15': 103.312028, '2023-08-16': 103.864046, '2023-08-17': 102.750156, '2023-08-18': 102.535809, '2023-08-21': 102.367606, '2023-08-22': 102.563326, '2023-08-23': 102.994199, '2023-08-25': 102.717711, '2023-08-28': 104.305663, '2023-08-29': 104.831193, '2023-08-30': 103.245159, '2023-08-31': 102.84932, '2023-09-01': 102.726589, '2023-09-04': 103.054189, '2023-09-05': 102.913852, '2023-09-06': 102.331452, '2023-09-07': 101.33269, '2023-09-08': 101.085584, '2023-09-11': 101.50798, '2023-09-13': 100.974174, '2023-09-14': 102.508688, '2023-09-15': 102.937454, '2023-09-18': 102.338309, '2023-09-19': 101.554751, '2023-09-20': 103.090898, '2023-09-21': 101.560682, '2023-09-22': 101.009019, '2023-09-25': 101.047582, '2023-09-26': 100.37302, '2023-09-27': 99.929022, '2023-09-28': 101.044934, '2023-09-29': 101.220892, '2023-10-02': 100.449853, '2023-10-03': 99.789434, '2023-10-04': 100.266424, '2023-10-05': 101.568524, '2023-10-06': 102.602421, '2023-10-09': 100.570176, '2023-10-10': 103.403888, '2023-10-11': 104.388701, '2023-10-12': 105.415454, '2023-10-13': 104.420377, '2023-10-16': 104.575644, '2023-10-17': 104.377441, '2023-10-18': 103.483538, '2023-10-19': 102.229057, '2023-10-20': 100.77547, '2023-10-23': 100.254584, '2023-10-24': 101.375301, '2023-10-25': 101.05178, '2023-10-26': 100.733534, '2023-10-27': 100.06038, '2023-10-30': 100.650705, '2023-10-31': 101.4327, '2023-11-01': 101.6259, '2023-11-02': 103.991366, '2023-11-03': 104.545445, '2023-11-06': 104.55372, '2023-11-07': 104.634121, '2023-11-08': 106.577274, '2023-11-09': 106.705667, '2023-11-10': 105.456044, '2023-11-13': 105.877762, '2023-11-14': 107.95355, '2023-11-15': 107.898129, '2023-11-16': 107.961981, '2023-11-17': 109.180364, '2023-11-20': 108.91273, '2023-11-21': 107.735521, '2023-11-22': 108.617896, '2023-11-23': 108.882266, '2023-11-24': 108.633266, '2023-11-27': 108.583618, '2023-11-28': 108.05452, '2023-11-29': 109.642485, '2023-11-30': 110.646598, '2023-12-01': 110.488779, '2023-12-04': 111.347073, '2023-12-05': 112.649632, '2023-12-06': 113.845739, '2023-12-07': 112.78731, '2023-12-08': 113.47087, '2023-12-11': 114.528594, '2023-12-12': 113.599925, '2023-12-13': 113.564313, '2023-12-14': 113.481658, '2023-12-15': 113.70252, '2023-12-18': 112.920761, '2023-12-19': 112.834886, '2023-12-20': 113.639872, '2023-12-21': 113.415002, '2023-12-22': 113.380023, '2023-12-27': 113.812672, '2023-12-28': 115.159022, '2023-12-29': 114.418244, '2024-01-02': 114.507067, '2024-01-03': 112.65279, '2024-01-04': 114.066841, '2024-01-05': 113.362264, '2024-01-08': 115.207026, '2024-01-09': 115.004314, '2024-01-10': 115.445869, '2024-01-11': 114.369374, '2024-01-12': 114.800749, '2024-01-15': 114.715175, '2024-01-16': 114.304849, '2024-01-17': 113.28447, '2024-01-18': 113.711976, '2024-01-19': 113.098406, '2024-01-22': 113.971418, '2024-01-23': 113.566716, '2024-01-24': 114.542333, '2024-01-25': 114.372664, '2024-01-26': 114.537383, '2024-01-29': 114.990707, '2024-01-30': 115.306626, '2024-01-31': 116.379528, '2024-02-01': 115.34216, '2024-02-02': 116.180191, '2024-02-05': 115.438887, '2024-02-06': 115.902354, '2024-02-07': 116.476072, '2024-02-08': 116.698513, '2024-02-09': 116.717141, '2024-02-12': 116.512043, '2024-02-13': 116.481392, '2024-02-14': 116.845452, '2024-02-15': 117.764051, '2024-02-16': 117.641839, '2024-02-19': 117.735528, '2024-02-20': 117.725431, '2024-02-21': 117.502959, '2024-02-22': 118.568061, '2024-02-23': 118.694728, '2024-02-26': 119.918882, '2024-02-27': 119.751871, '2024-02-28': 120.366476, '2024-02-29': 121.265109, '2024-03-01': 122.095325, '2024-03-04': 122.300645, '2024-03-05': 121.390568, '2024-03-06': 121.75011, '2024-03-07': 123.376469, '2024-03-08': 123.961573, '2024-03-11': 122.931591, '2024-03-12': 125.055433, '2024-03-13': 124.782233, '2024-03-14': 124.924829, '2024-03-15': 124.586043, '2024-03-18': 124.895524, '2024-03-19': 124.860578, '2024-03-20': 125.058414}

app = Flask(__name__)
CORS(app)
esgData = pd.read_csv("../data/Data_Full.csv", delimiter=";")

esg = ESGData(esgData)
fin = FinancialDataAPI("../api-keys")
recommender = Recommender(esgData[["ISIN_BC","Biodiversity","Environmental","Fossil fuels","Greenhouse gas emissions","Scoping according to SFDR annex template","Social","Waste","Water"]], gamma=0.2)
aiService = AIService()

# Simulate stock time series data as a list of 100 numbers
def generate_stock_data():
    # Using numpy to generate 100 random prices around a mean of 100 with some volatility
    np.random.seed(42)  # For consistent results, remove in real applications
    prices = np.random.normal(loc=100, scale=10, size=100).tolist()
    return prices


def getWholeData(isins: List[str]):
    return esgData[esgData['ISIN_BC'].isin(isins)].to_json(orient="records")


@app.route('/api/stock-data', methods=['GET'])
def get_stock_data():
    isin = request.args.get("isin")
    dateFrom = request.args.get("dateFrom")
    dateTo = request.args.get("dateTo")

    print(isin, dateFrom, dateTo)
    stock_data = fin.provideEndOfDayHistory("ISIN_BC", isin, dateFrom, dateTo)
    return jsonify(stock_data)

@app.route('/api/esg-data', methods=['GET'])
def get_esg_data():
    isin = request.args.get("isin")
    data = esg.getESGdata(isin)
    print(data, flush=True)
    data['stock_data'] = fin.provideEndOfDayHistory("ISIN_BC", isin, "2023-03-21", "2024-03-21")
    return jsonify(data)

@app.route('/api/recommendation', methods=['GET'])
def getRecommendations():
    n = request.args.get("n", default=20, type=int)
    recommendations = list(recommender.getRecommendation(n=n, deterministic=True))
    return getWholeData(recommendations)

@app.route('/api/compare-suggestion', methods=['GET'])
def getCompareSuggestion():
    suggestion = recommender.getCompareSuggestion()
    print(suggestion)
    data = json.loads(getWholeData(suggestion))
    temp = fin.provideEndOfDayHistoryMult("ISIN_BC", list(suggestion), "2023-03-21", "2024-03-21")
    # print(temp)
    if len(temp.keys()) == 0:
        temp['wtf'] = y
        temp['wtf1'] = y
    if len(temp.keys()) == 1:
        temp['wtf'] = temp[list(temp.keys())[0]]
        # print(temp[list(temp.keys())[0]])
    for i, d in enumerate(data):
        d["stock_data"] = temp[list(temp.keys())[i]]
    return jsonify(data)

@app.route('/api/update-preferences', methods=['POST'])
def updatePreferences():
    data = request.get_json()
    pair = data["pair"]
    preference = data["preference"]
    recommender.updatePreferences(pair, preference)
    return "OK"

@app.route('/api/openAI', methods=['GET'])
def getOpenAI():
    isin = request.args.get("isin")
    data = getWholeData([isin])[0]
    print(data, flush=True)
    return aiService.getSummaryOfESGData(data)

@app.route('/api/portfolio-summary', methods=['POST'])
def getPortfolioSummary():
    data = request.get_json()
    portfolio = data["portfolio"]
    portfolio = getWholeData(portfolio)
    return aiService.getPortfolioSummary(portfolio)

@app.route('/api/preferences', methods=['GET'])
def getPreferences():
    prefs = recommender.getPreferences()
    print(prefs)
    return jsonify(prefs)


if __name__ == '__main__':
    app.run(debug=True)
